---
import SunIcon from "./icons/Sun.astro"
import MoonIcon from "./icons/Moon.astro"
import SystemIcon from "./icons/System.astro"

const THEMES = ["Light", "Dark", "System"]
---

<div class="relative ml-1 mr-1">
  <button
    transition:persist
    id="theme-toggle-btn"
    class="appearance-none border-none flex hover:scale-125 transition"
  >
    <span class="sr-only">Elige el tema</span>
    <SunIcon id="light" class="theme-toggle-icon size-5 transition-all" />
    <MoonIcon
      id="dark"
      class="theme-toggle-icon absolute size-5 transition-all"
    />
    <SystemIcon
      id="system"
      class="theme-toggle-icon absolute size-5 transition-all"
    />
  </button>
  <div
    transition:persist
    id="themes-menu"
    class="absolute hidden scale-80 top-8 right-0 text-sm p-1 min-w-[8rem] rounded-md border border-gray-100 bg-white/90 dark:bg-gray-900/90 dark:border-gray-500/20 shadow-[0_3px_10px_rgb(0,0,0,0.2)] backdrop-blur-md"
  >
    <ul>
      {
        THEMES.map((theme) => (
          <li class="themes-menu-option px-2 py-1.5 cursor-default hover:bg-neutral-400/40 dark:hover:bg-gray-500/50 rounded-sm">
            {theme}
          </li>
        ))
      }
    </ul>
  </div>
</div>

<style>
  #themes-menu.open {
    display: inline;
    animation: scale-up-center 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
  }

  @keyframes scale-up-center {
    from {
      transform: scale(0.8);
      opacity: 0;
    }

    to {
      transform: scale(1);
      opacity: 1;
    }
  }
</style>

<script>
  type ThemePreference = "dark" | "light" | "system"

  const DARK: ThemePreference = "dark"
  const LIGHT: ThemePreference = "light"
  const SYSTEM: ThemePreference = "system"
  const THEME_STORAGE_KEY = "theme"

  let remove: (() => void) | null = null
  const matchMedia = window.matchMedia("(prefers-color-scheme: dark)")
  const themesMenu = document.getElementById("themes-menu") as HTMLDivElement

  const getThemePreference = (): ThemePreference => {
    if (typeof localStorage !== "undefined") {
      return (localStorage.getItem(THEME_STORAGE_KEY) as ThemePreference) ?? SYSTEM
    }

    return matchMedia.matches ? DARK : LIGHT
  }

  const updateIcon = (themePreference: ThemePreference): void => {
    document.querySelectorAll<HTMLElement>(".theme-toggle-icon").forEach((element) => {
      element.style.scale = element.id === themePreference ? "1" : "0"
    })
  }

  const updateTheme = (): void => {
    if (remove != null) {
      remove()
    }
    matchMedia.addEventListener("change", updateTheme)
    remove = () => {
      matchMedia.removeEventListener("change", updateTheme)
    }

    const themePreference = getThemePreference()
    const isDark =
      themePreference === DARK ||
      (themePreference === SYSTEM && matchMedia.matches)

    updateIcon(themePreference)
    document.documentElement.classList.toggle("dark", isDark)
  }

  updateTheme()

  document.addEventListener("click", () => themesMenu.classList.remove("open"))

  document.getElementById("theme-toggle-btn")?.addEventListener("click", (e) => {
    e.stopPropagation()
    const isClosed = !themesMenu.classList.contains("open")
    themesMenu.classList.toggle("open", isClosed)
  })

  document.querySelectorAll<HTMLLIElement>(".themes-menu-option").forEach((element) => {
    element.addEventListener("click", (e) => {
      const target = e.target as HTMLElement
      const theme = target.innerText.toLowerCase().trim() as ThemePreference
      localStorage.setItem(THEME_STORAGE_KEY, theme)
      updateTheme()
    })
  })

  document.addEventListener('astro:after-swap', () => {
    updateTheme();
    window.scrollTo({ left: 0, top: 0, behavior: 'instant' });
  })
</script>
